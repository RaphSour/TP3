# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TP3_Comparateur_Couche
                                 A QGIS plugin
 Ce plugin sert a comparer deux couches entre elles.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-22
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Raphael Sourceaux; Jeremy Gagnon
        email                : wadwada@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QObject
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QFileDialog
from qgis.core import QgsWkbTypes, QgsFeatureRequest
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .TP3_Comparateur_Couche_dockwidget import TP3_Comparateur_CoucheDockWidget
import os.path
import statistics
import csv
class ComparateurController(QObject):
    def __init__(self, iface, dockwidget):
        super().__init__()
        self.iface = iface
        self.dock = dockwidget

        # branchement des couches
        self.dock.mMapLayerComboBoxCouche1.currentIndexChanged.connect(self.update_info_couche1)
        self.dock.mMapLayerComboBoxCouche2.currentIndexChanged.connect(self.update_info_couche2)
        # branchement des couches de sélection de champ
        self.dock.mFieldComboBoxCouche1.currentIndexChanged.connect(self.update_stats)
        self.dock.mFieldComboBoxCouche2.currentIndexChanged.connect(self.update_stats)

        self.dock.checkBoxLimiteVisible.stateChanged.connect(self.update_stats)
        canvas = self.iface.mapCanvas()
        canvas.extentsChanged.connect(self._on_extent_changed)

        self.dock.toolButtonExport.clicked.connect(self.export_to_csv)

    def export_to_csv(self):
    #Exporte en CSV les métadonnées, la bounding box (si demandée) puis le contenu de tableValeurChamps.
        table = self.dock.tableValeurChamps
    
        # Sélection du fichier
        filename, _ = QFileDialog.getSaveFileName(
            None, "Enregistrer les statistiques", "", "CSV (*.csv)"
        )
        if not filename:
            return
        if not filename.lower().endswith(".csv"):
            filename += ".csv"
    
        try:
            with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
    
                # --- 1. Bounding box si activée ---
                if self.dock.checkBoxLimiteVisible.isChecked():
                    canvas = self.iface.mapCanvas()
                    extent = canvas.extent()
                    xmin, ymin = extent.xMinimum(), extent.yMinimum()
                    xmax, ymax = extent.xMaximum(), extent.yMaximum()
    
                    writer.writerow(['Bounding box de la vue'])  # titre de section
                    writer.writerow(['X min', f"{xmin:.2f}"])
                    writer.writerow(['Y min', f"{ymin:.2f}"])
                    writer.writerow(['X max', f"{xmax:.2f}"])
                    writer.writerow(['Y max', f"{ymax:.2f}"])
                    writer.writerow([])  # ligne vide pour séparer
    
                # --- 2. Métadonnées des couches ---
                metas = []
                for suffix in ("Couche1", "Couche2"):
                    layer = getattr(self.dock, f"mMapLayerComboBox{suffix}").currentLayer()
                    if layer:
                        name = layer.name()
                        geom = QgsWkbTypes.displayString(layer.wkbType())
                        count = layer.featureCount()
                        crs = layer.crs().authid()
                        total_len = total_area = 0
                        for feat in layer.getFeatures():
                            g = feat.geometry()
                            if not g:
                                continue
                            if layer.geometryType() == QgsWkbTypes.LineGeometry:
                                total_len += g.length()
                            elif layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                                total_area += g.area()
                    else:
                        name = geom = count = crs = ""
                        total_len = total_area = ""
                    metas.append((name, geom, count, total_area, total_len, crs))
    
                # en-tête métadonnées
                writer.writerow(['Propriété', 'Couche 1', 'Couche 2'])
                writer.writerow(['Nom de la couche', metas[0][0], metas[1][0]])
                writer.writerow(['Type de géométrie', metas[0][1], metas[1][1]])
                writer.writerow(["Nombre d'entités", metas[0][2], metas[1][2]])
                writer.writerow(['Surface totale (m²)',
                                 f"{metas[0][3]:.2f}" if metas[0][3] != "" else "",
                                 f"{metas[1][3]:.2f}" if metas[1][3] != "" else ""])
                writer.writerow(['Longueur totale (m)',
                                 f"{metas[0][4]:.2f}" if metas[0][4] != "" else "",
                                 f"{metas[1][4]:.2f}" if metas[1][4] != "" else ""])
                writer.writerow(['Projection', metas[0][5], metas[1][5]])
                writer.writerow([])
    
                # --- 3. Tableau de statistiques ---
                headers = [''] + [
                    table.horizontalHeaderItem(col).text()
                    for col in range(table.columnCount())
                ]
                writer.writerow(headers)
    
                for row in range(table.rowCount()):
                    label = table.verticalHeaderItem(row).text()
                    row_data = [
                        table.item(row, col).text() if table.item(row, col) else ''
                        for col in range(table.columnCount())
                    ]
                    writer.writerow([label] + row_data)
    
            self.iface.messageBar().pushMessage(
                "Export CSV",
                f"Fichier enregistré : {filename}",
                level=0
            )
        except Exception as e:
            self.iface.messageBar().pushMessage(
                "Erreur Export CSV", str(e), level=3
            )
    
    def _on_extent_changed(self):
        # si la case "Limiter à la vue" est cochée, on recalcule
        if self.dock.checkBoxLimiteVisible.isChecked():
            self.update_stats()

    def _init_stats_table(self):
        table = self.dock.tableValeurChamps
        stats = ["Moyenne", "Médianne", "Écart‑type", "Minimum", "Maximum", "Somme", "Entités"]
        table.setRowCount(len(stats))
        table.setColumnCount(2)
        table.setHorizontalHeaderLabels(["Couche 1", "Couche 2"])
        table.setVerticalHeaderLabels(stats)

    def update_stats(self):
        canvas = self.iface.mapCanvas()
        use_extent = self.dock.checkBoxLimiteVisible.isChecked()
        extent = canvas.extent() if use_extent else None

        for col, suffix in enumerate(("Couche1", "Couche2")):
            layer = getattr(self.dock, f"mMapLayerComboBox{suffix}").currentLayer()
            field_name = getattr(self.dock, f"mFieldComboBox{suffix}").currentField()
            values = []

            if layer and field_name:
                if use_extent:
                    req = QgsFeatureRequest().setFilterRect(extent)
                    feats = layer.getFeatures(req)
                else:
                    feats = layer.getFeatures()

                for feat in feats:
                    geom = feat.geometry()
                    # Vérifie que la géométrie coupe bien l'étendue
                    if use_extent and geom is not None and not geom.intersects(extent):
                        continue
                    val = feat[field_name]
                    try:
                        values.append(float(val))
                    except (TypeError, ValueError):
                        pass

            table = self.dock.tableValeurChamps

            #si pas de valeurs numériques, on vide la colonne
            if not values:
                for row in range(table.rowCount()):
                    table.setItem(row, col, QTableWidgetItem(""))
                continue

            # calcul des stats
            mean    = statistics.mean(values)
            median  = statistics.median(values)
            stdev   = statistics.pstdev(values) if len(values) > 1 else 0.0
            minimum = min(values)
            maximum = max(values)
            total   = sum(values)
            count_val = len(values)
            all_stats = [mean, median, stdev, minimum, maximum, total, count_val]

            # remplissage de la colonne
            for row, val in enumerate(all_stats):
                # on formate l’entier sans décimales, les autres en float
                text = str(val) if row == 6 else f"{val:.2f}"
                item = QTableWidgetItem(text)
                self.dock.tableValeurChamps.setItem(row, col, item)

    def update_info_couche1(self):
        self._update_layer_info(self.dock.mMapLayerComboBoxCouche1.currentLayer(), suffix='Couche1')

    def update_info_couche2(self):
        self._update_layer_info(self.dock.mMapLayerComboBoxCouche2.currentLayer(), suffix='Couche2')

    def _update_layer_info(self, layer, suffix):
        if not layer:
            return

        # Nom de la couche
        getattr(self.dock, f"layerNom{suffix}").setText( f"Nom de la couche : {layer.name()}")

        # Type de géométrie (Point / Line / Polygon)
        geom_display = QgsWkbTypes.displayString(layer.wkbType())
        getattr(self.dock, f"labelGeo{suffix}").setText(f"Type de géométrie : {geom_display}")

        # Nombre d'entités
        getattr(self.dock, f"labelNbEntite{suffix}").setText(f"Nombre d'entitées totale : {str(layer.featureCount())}")

        # Projection
        getattr(self.dock, f"labelProjection{suffix}").setText(f"Projection : {layer.crs().authid()}")

        # Remplir la combo de champs
        getattr(self.dock, f"mFieldComboBox{suffix}").setLayer(layer)

        # Calcul longueur / surface
        total_len = 0
        total_area = 0
        for feat in layer.getFeatures():
            geom = feat.geometry()
            if geom is None:
                continue
            if layer.geometryType() == QgsWkbTypes.LineGeometry:
                total_len += geom.length()
            elif layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                total_area += geom.area()

        getattr(self.dock, f"labelLongeur{suffix}").setText(f"Longueur totale(m) : {total_len:.2f}")
        getattr(self.dock, f"labelSurface{suffix}").setText(f"Surface totale(m²) : {total_area:.2f}")

class TP3_Comparateur_Couche:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TP3_Comparateur_Couche_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Comparateur de couche')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'TP3_Comparateur_Couche')
        self.toolbar.setObjectName(u'TP3_Comparateur_Couche')

        #print "** INITIALIZING TP3_Comparateur_Couche"

        self.pluginIsActive = False
        self.dockwidget = None
        self.controller = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TP3_Comparateur_Couche', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/TP3_Comparateur_Couche/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING TP3_Comparateur_Couche"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD TP3_Comparateur_Couche"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Comparateur de couche'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        if not self.pluginIsActive:
            self.pluginIsActive = True
            if self.dockwidget is None:
                self.dockwidget = TP3_Comparateur_CoucheDockWidget()
                self.dockwidget.closingPlugin.connect(self.onClosePlugin)
        # branchement du controller une seule fois
            if self.controller is None:
                self.controller = ComparateurController(self.iface, self.dockwidget)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
